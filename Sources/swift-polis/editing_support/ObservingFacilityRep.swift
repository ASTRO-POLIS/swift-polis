//
//  ObservingFacilityRep.swift
//  swift-polis
//
//  Created by Georg Tuparev on 17.10.24.
//

import Foundation

public class ObservingFacilityRep {

    
    /// Tries to register a new facility
    ///
    /// In case facility with the same `id` already exists, `facilityAlreadyExists` is thrown.
    /// - Parameters:
    ///   - id: the unique facility id. If not provided will be autogenerated
    ///   - name: although not required, it is recommended, that the name is unique. This will provide more meaningful search and discovery functionality
    /// - Returns: newly registered facility
    public static func registerNewFacility(with id: UUID = UUID(), name: String = "Unknown Facility") throws -> ObservingFacilityRep {
        let result      = ObservingFacilityRep(id: id, name: name)
        let newIdentity = PolisIdentity(id: id, name: name, polisRegistrationDate: Date.now)
        let newItem     = PolisItem(identity: newIdentity)
        let dirEntry    = PolisObservingFacilityDirectory.ObservingFacilityReference(identity: newIdentity)

        PolisProviderManager.currentProviderManager.facilityDirectory.addObservingFacility(reference: dirEntry)
        result.identity = newIdentity
        result.item     = newItem

        return result
    }

    public static func facility(with id: UUID) async throws -> ObservingFacilityRep? {

        //TODO: Implement me!

        return nil
    }

    //MARK: Error definitions
    public enum ObservingFacilityRepError: Error {
        case facilityAlreadyExists
    }

    // Polis Identity defined
    public let id: UUID
    public var externalReferences: [String]?
    public var lastUpdateDate: Date
    public var name: String
    public var localName: String?
    public var abbreviation: String?
    public var shortDescription: String?
    public var startDate: Date?
    public var endDate: Date?
    public var polisRegistrationDate: Date?

    // Polis Item defined
    public var owner: PolisItem.Owner?
    public var parentID: UUID?
    public var automationLabel: String?
    public var media: PolisMediaSource?

    // Polis Observing Facility Details defined
    public var gravitationalBodyRelationship = PolisObservingFacility.ObservingFacilityLocationType.surfaceFixed
    public var placeInTheSolarSystem         = PolisObservingFacility.PlaceInTheSolarSystem.earth
    public var observingFacilityCode: String?
    public var solarSystemBodyName: String?
    public var orbitingAroundPlaceInTheSolarSystemNamed: String?
    public var facilityLocationID: UUID?                                   // Points to dictionary with some predefined (standard) keys
    public var astronomicalCode: String?                                   // Minor planet codes, etc.

    func flush() async throws {
        let manager = PolisProviderManager.currentProviderManager!

        try await manager.facilityDirectory.flashUsing(manager: PolisProviderManager.currentProviderManager)

        // Identity
        identity.externalReferences    = externalReferences
        identity.lastUpdateDate        = lastUpdateDate
        identity.name                  = name
        identity.localName             = localName
        identity.abbreviation          = abbreviation
        identity.shortDescription      = shortDescription
        identity.startDate             = startDate
        identity.endDate               = endDate
        identity.polisRegistrationDate = polisRegistrationDate

        // Item
        item.identity        = identity
        item.owner           = owner
        item.parentID        = parentID
        item.automationLabel = automationLabel
        item.media           = media

        let facility = PolisObservingFacility(item: item, gravitationalBodyRelationship: PolisObservingFacility.ObservingFacilityLocationType.surfaceFixed, placeInTheSolarSystem: PolisObservingFacility.PlaceInTheSolarSystem.earth)

        facility.gravitationalBodyRelationship            = gravitationalBodyRelationship
        facility.placeInTheSolarSystem                    = placeInTheSolarSystem
        facility.observingFacilityCode                    = observingFacilityCode
        facility.solarSystemBodyName                      = solarSystemBodyName
        facility.orbitingAroundPlaceInTheSolarSystemNamed = orbitingAroundPlaceInTheSolarSystemNamed
        facility.facilityLocationID                       = facilityLocationID
        facility.astronomicalCode                         = astronomicalCode

        try await ensureFacilityFolderDoesExist()

        let detailsPath = manager.polisFileResourceFinder.observingFacilityFile(observingFacilityID: identity.id)

        do {
            let data = try manager.jsonEncoder.encode(facility)
            try data.write(to: URL(string: detailsPath)!)
        }
        catch {
            PolisLogger.shared.error("Cannot encode or save facility details to: \(detailsPath)")
            throw PolisProviderManager.PolisProviderManagerError.cannotWriteFile
        }
    }

    func ensureFacilityFolderDoesExist() async throws {
        let manager = PolisProviderManager.currentProviderManager!
        let path    = manager.polisFileResourceFinder.observingFacilityFolder(observingFacilityID: identity.id)

        if !manager.tryToEnsureFoldersExistence(paths: [path]) {
            PolisLogger.shared.error("Cannot create or access facility forlder: \(path)")
            throw PolisProviderManager.PolisProviderManagerError.cannotAccessOrCreateStandardPolisFolder
        }
    }

    //MARK: Private stuff

    var identity: PolisIdentity!
    var item: PolisItem!

    private init(id: UUID, lastUpdateDate: Date = Date(), name: String) {
        self.id = id
        self.lastUpdateDate = lastUpdateDate
        self.name = name
    }
}
