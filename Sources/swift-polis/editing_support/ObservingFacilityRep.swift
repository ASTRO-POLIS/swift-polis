//
//  ObservingFacilityRep.swift
//  swift-polis
//
//  Created by Georg Tuparev on 17.10.24.
//

import Foundation

public class ObservingFacilityRep {

    
    /// Tries to register a new facility
    ///
    /// In case facility with the same `id` already exists, `facilityAlreadyExists` is thrown.
    /// - Parameters:
    ///   - id: the unique facility id. If not provided will be autogenerated
    ///   - name: although not required, it is recommended, that the name is unique. This will provide more meaningful search and discovery functionality
    /// - Returns: newly registered facility
    public static func registerNewFacility(with id: UUID = UUID(), name: String = "Unknown Facility") throws -> ObservingFacilityRep {
        var result = ObservingFacilityRep(id: id, name: name)

        //TODO: Try to register to the facility directory.

        return result
    }

    public static func facility(with id: UUID) async throws -> ObservingFacilityRep? {

        //TODO: Implement me!

        return nil
    }

    //MARK: Error definitions
    public enum ObservingFacilityRepError: Error {
        case facilityAlreadyExists
    }

    // Polis Identity defined
    public let id: UUID
    public var externalReferences: [String]?
    public var lastUpdateDate: Date
    public var name: String
    public var localName: String?
    public var abbreviation: String?
    public var shortDescription: String?
    public var startDate: Date?
    public var endDate: Date?
    public var polisRegistrationDate: Date?

    // Polis Item defined
    public var owner: PolisItem.Owner?
    public var parentID: UUID?
    public var automationLabel: String?
    public var media: PolisMediaSource?

    // Polis Observing Facility Details defined
    public var gravitationalBodyRelationship = PolisObservingFacility.ObservingFacilityLocationType.surfaceFixed
    public var placeInTheSolarSystem         = PolisObservingFacility.PlaceInTheSolarSystem.earth
    public var observingFacilityCode: String?
    public var solarSystemBodyName: String?
    public var orbitingAroundPlaceInTheSolarSystemNamed: String?
    public var facilityLocationID: UUID?                                   // Points to dictionary with some predefined (standard) keys
    public var astronomicalCode: String?                                   // Minor planet codes, etc.

    private init(id: UUID, lastUpdateDate: Date = Date(), name: String) {
        self.id = id
        self.lastUpdateDate = lastUpdateDate
        self.name = name
    }
}
